// ---------------------------------------------------
// Task única para instalar el pre-commit hook
// ---------------------------------------------------
def srcHookPath = "${rootDir}/.githooks/pre-commit"
def hookFilePath = "${rootDir}/.git/hooks/pre-commit"

tasks.register("installGitHook") {
    def srcHook = file(srcHookPath)
    def hookFile = file(hookFilePath)

    outputs.file(hookFile)

    doLast {
        if (!srcHook.exists()) {
            println "❌ No se encontró el hook en .githooks/pre-commit"
            return
        }

        hookFile.parentFile.mkdirs()
        hookFile.text = srcHook.text
        hookFile.setExecutable(true)
        println "✅ Pre-commit hook instalado/actualizado en .git/hooks/"
    }
}

// ---------------------------------------------------
// Configuración común para todos los subproyectos
// ---------------------------------------------------
subprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'jacoco'

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib"
        testImplementation "org.jetbrains.kotlin:kotlin-test"
        testImplementation "org.junit.jupiter:junit-jupiter:5.9.2"
        testImplementation "io.mockk:mockk:1.13.7"
    }

    compileKotlin {
        kotlinOptions { jvmTarget = "21" }
    }
    compileTestKotlin {
        kotlinOptions { jvmTarget = "21" }
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            html.required = true
        }
    }

    jacocoTestCoverageVerification {
        dependsOn jacocoTestReport
        violationRules {
            rule {
                limit { minimum = 0.80 }
            }
        }
    }

    // Vincular instalación del hook a los tests de cada subproyecto
    tasks.named("test") {
        dependsOn(rootProject.tasks.named("installGitHook"))
    }
}

// ---------------------------------------------------
// También la task de test de la raíz, si existe
// ---------------------------------------------------
tasks.matching { it.name == "test" }.configureEach {
    dependsOn(tasks.named("installGitHook"))
}