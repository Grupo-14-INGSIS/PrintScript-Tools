//aplico el plugin de jacoco

//saco all projects maven porque ya esta configurado en myPlugin-conventions

subprojects { //configura todos los proyectos de forma homogenea
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'jacoco'

    dependencies { //dependencias comunes para todos los subproyectos
        implementation "org.jetbrains.kotlin:kotlin-stdlib"
        testImplementation "org.jetbrains.kotlin:kotlin-test"
        testImplementation "org.junit.jupiter:junit-jupiter:5.9.2"
        testImplementation "io.mockk:mockk:1.13.7"
    }

    test { //configura tests
        useJUnitPlatform()
        finalizedBy jacocoTestReport // Genera reporte despuÃ©s de tests
    }

    jacocoTestReport {
        dependsOn test // Asegura que los tests se ejecuten primero
        reports {
            xml.required = true
            html.required = true
        }
    }

    jacocoTestCoverageVerification {
        dependsOn jacocoTestReport
        violationRules {
            rule {
                limit {
                    minimum = 0.80
                }
            }
        }
    }

    compileKotlin { //compila el codigo, usa jvm 21 habilitando nuevas caracteristicas
        kotlinOptions {
            jvmTarget = "21"
        }
    }

    compileTestKotlin { //lo mismo del anterior, pero para tests
        kotlinOptions {
            jvmTarget = "21"
        }
    }

    tasks.register("installGitHook"){
        doLast{
            def hooksDir = file("${rootDir}/.git/hooks")
            def hookFile = file("${hooksDir}/pre-commit")
            def srcHook = file("${rootDir}/.githooks/pre-commit")

            if (!srcHook.exists()){
                println"There is no hook in .githooks/pre-commit"
                return
            }
            hooksDir.mkdirs()
            srcHook.withInputStream { ins ->
                hookFile.withOutputStream { os-> os << ins}
            }
            hookFile.setExecutable(true)
            println "Pre-commit hook was installed?updated in .git/hooks/"
        }
    }
    subprojects{
        tasks.named("test"){
            dependsOn(rootProject.tasks.named("installGitHook"))
        }
    }
}