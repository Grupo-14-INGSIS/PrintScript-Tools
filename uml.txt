@startuml
' ### INTERPRETER ###

class Lexer {
' Toma la String y la convierte en una lista de Tokens. Se encarga de identificar las palabras claves
Token[] process(String text)
}

class Token {
Keyword type
String content
Position position
}

class Position {
int line
int column
}

enum Keyword {}

class Parser {
' Toma la lista de Tokens y verifica si forman una estructura válida. De ser así, devuelve un AST
Command parse(Token[] tokens)
}

class VariableStorage {
Map<String, Any> variables
' Almacena el nombre de la variable y su valor
VariableStorage getInstance()
' Singleton
Any get(String variable)
Any storage(String variable, Any value)
' Agrega o actualiza una variable
Any delete(String vaiable)
}

class CommandFactory {
Map<Keyword, Command> commands
Command getCommand(ParseNode node)
}

interface Command {
void execute()
}

class ParseNode {
Token token
Token[] children
}

class Interpreter {
' Ejecuta el AST
void execute(ASTNode tree)
}

' ### FORMATTER ###

class Formatter {
' Aplica formato y convenciones al código, sin cambiar su funcionalidad
}

' ### STATIC CODE ANALYZER ###

class StaticCodeAnalyzer {
' Busca errores y malas prácticas
}

Lexer -right-> Token
Token -down-> Keyword
Token -up-> Position
Token <--right-- Parser
Parser -right> Command
Parser <-down-> CommandFactory
Parser -down-> ParseNode
ParseNode -right-> CommandFactory
Keyword <-right- CommandFactory
CommandFactory -up-> Command
CommandFactory -right-> VariableStorage
Command <-right- Interpreter
@enduml