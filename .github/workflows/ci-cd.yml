name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  ci-cd:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Dar permisos de ejecución a gradlew
        run: chmod +x ./gradlew

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Run ktlintFormat
        run: |
          CHANGES_BEFORE=$(git diff --name-only)
          ./gradlew ktlintFormat --quiet
          CHANGES_AFTER=$(git diff --name-only)
          if [ "$CHANGES_BEFORE" != "$CHANGES_AFTER" ]; then
            echo "Build bloqueado: ktlintFormat modificó archivos."
            exit 1
          fi

      - name: Run ktlintCheck
        run: ./gradlew ktlintCheck --quiet

      - name: Run tests
        run: |
          ./gradlew test --continue > .git/test-output.log
          if grep -q "FAILED" .git/test-output.log; then
            echo "Build bloqueado: fallaron tests."
            cat .git/test-output.log | grep FAILED
            exit 1
          fi

      - name: Verify coverage
        run: |
          ./gradlew jacocoTestCoverageVerification --quiet
          if [ $? -ne 0 ]; then
            echo "Build bloqueado: cobertura de código inferior al 80%."
            ./gradlew jacocoTestReport
            exit 1
          fi

      - name: Check
        run: ./gradlew check

      - name: Build
        run: ./gradlew build

      # --- Exportar secretos para CI/CD ---
      - name: Set Gradle publishing secrets
        run: |
          echo "GITHUB_USER=${{ secrets.MY_USER }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.MY_TOKEN }}" >> $GITHUB_ENV

      # --- Obtener última versión publicada y calcular siguiente ---
      - name: Get last package version
        id: get_version
        uses: actions/github-script@v6
        with:
          script: |
            const { data: versions } = await github.rest.packages.listVersionsForPackageForOrg({
              org: 'Grupo-14-INGSIS',
              package_type: 'maven',
              package_name: 'PrintScript-Tools'
            });
            const lastVersion = versions.length > 0 ? versions[0].metadata.container.tags[0] : '0.0.0';
            console.log('Last version:', lastVersion);
            core.setOutput('version', lastVersion)

      - name: Set next version
        id: next_version
        run: |
          last_version=${{ steps.get_version.outputs.version }}
          echo "Last version: $last_version"

          IFS='.' read -r major minor patch <<< "$last_version"
          patch=$((patch+1))
          next_version="$major.$minor.$patch"

          echo "Next version: $next_version"
          echo "$next_version" > VERSION.txt
          echo "VERSION=$next_version" >> $GITHUB_ENV

      - name: Publish to GitHub Packages
        if: github.ref == 'refs/heads/main'
        run: ./gradlew publish --no-configuration-cache
