name: CI/CD

on:
  push:
    branches:
      - main

permissions:
  packages: write
  contents: read

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Get previous version
        id: latest_version
        uses: vsoch/maven-metadata-action@v1
        with:
          url: "https://maven.pkg.github.com/Grupo-14-INGSIS/PrintScript-Tools"
          repository: "IngsisTP/cli"
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Increment version
        id: version
        run: |
          version=${{ steps.latest_version.outputs.latest }}
          if [ -z "$version" ]; then
            version="1.0.0"
          else
            version=$(echo $version | awk -F. -v OFS=. '{$NF++;print}')
          fi
          echo "version=$version" >> $GITHUB_OUTPUT

  ci-cd:
    needs: get_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Set version and credentials in gradle.properties
        run: |
          echo "version=${{ needs.get_version.outputs.version }}" >> gradle.properties
          echo "gpr.user=${{ github.actor }}" >> gradle.properties
          echo "gpr.key=${{ secrets.GITHUB_TOKEN }}" >> gradle.properties

      - name: Run ktlintFormat
        run: |
          CHANGES_BEFORE=$(git diff --name-only)
          ./gradlew ktlintFormat --quiet
          CHANGES_AFTER=$(git diff --name-only)
          if [ "$CHANGES_BEFORE" != "$CHANGES_AFTER" ]; then
            echo "Build blocked: ktlintFormat modified files."
            exit 1
          fi

      - name: Run ktlintCheck
        run: ./gradlew ktlintCheck --quiet

      - name: Run tests
        run: |
          ./gradlew test --continue > .git/test-output.log
          if grep -q "FAILED" .git/test-output.log; then
            echo "Build blocked: tests failed."
            cat .git/test-output.log | grep FAILED
            exit 1
          fi

      - name: Verify coverage
        run: |
          ./gradlew jacocoTestCoverageVerification --quiet
          if [ $? -ne 0 ]; then
            echo "Build blocked: code coverage below 80%."
            ./gradlew jacocoTestReport
            exit 1
          fi

      - name: Check
        run: ./gradlew check

      - name: Build
        run: ./gradlew build

      - name: Publish to GitHub Packages
        if: github.ref == 'refs/heads/main'
        run: ./gradlew publish --no-configuration-cache