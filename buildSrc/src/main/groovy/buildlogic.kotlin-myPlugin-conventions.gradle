plugins {
    id 'org.jetbrains.kotlin.jvm' //sin version
    id 'org.jlleitschuh.gradle.ktlint'
    id 'jacoco'
    id 'maven-publish'
}

def timestamp = new Date().format("yyyyMMddHHmmss")
version = "1.1.${timestamp}"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.9.2"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:1.9.3"
}

test {
    useJUnitPlatform()
}

tasks.named("build") {
    dependsOn "ktlintCheck", "test" //no pongo el de formatt pq cambiaria el archivo y no quier que lo haga aca. Lo corro automatico, pero desde la terminal.
}

ktlint{
    additionalEditorconfigFile = file("$rootDir/config/.editorConfig") // con esto tenemos las reglas custom
}

// Cargo las variables automÃ¡ticamente desde el .env (local)
def dotenvFile = file("$rootDir/.env")
def dotenvProps = new Properties()
if (dotenvFile.exists()) {
    dotenvFile.withReader { reader ->
        reader.eachLine { line ->
            line = line.trim()
            if (!line.startsWith("#") && line.contains("=")) {
                def (key, value) = line.split("=", 2)
                dotenvProps.setProperty(key.trim(), value.trim())
            }
        }
    }
}

// Para publicar objetos
publishing {
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }

    repositories {
        maven {
            name = 'GitHubPackages'
            url = 'https://maven.pkg.github.com/Grupo-14-INGSIS/PrintScript-Tools'
            credentials {
                // Primero intenta leer del entorno (CI/CD), si no existe usa el .env local
                username = System.getenv("GITHUB_USER") ?: dotenvProps.getProperty("GITHUB_USER") ?: ""
                password = System.getenv("GITHUB_TOKEN") ?: dotenvProps.getProperty("GITHUB_TOKEN") ?: ""
            }
        }
    }
}
